<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Eilarc Blog</title>
  
  <subtitle>Blockchain Solutions</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://eilarc.io/blog/"/>
  <updated>2018-07-28T17:44:19.610Z</updated>
  <id>https://eilarc.io/blog/</id>
  
  <author>
    <name>Ashish Prajapati</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Create an ICO on Stellar Network With Custom Token</title>
    <link href="https://eilarc.io/blog/2018/02/04/create-an-ico-on-stellar-network-with-custom-token/"/>
    <id>https://eilarc.io/blog/2018/02/04/create-an-ico-on-stellar-network-with-custom-token/</id>
    <published>2018-02-04T11:12:06.000Z</published>
    <updated>2018-07-28T17:44:19.610Z</updated>
    
    <content type="html"><![CDATA[<p>As you know, majority of the ICOs today are made on Ethereum (ERC20 token). But Ethereum is a big slow computer. If the intension is just to raise funds for the startup then Stellar can do a lot faster, better and cheaper! Note that stellar does not provide smart contracts, it is an open source platform for developing financial applications.</p><p>Advantage of using Stellar platform for ICO is its cheap transaction fees, faster transactions and getting ICO online very fast with very less development time. Stellar transactions cost fraction of a penny compared to $$ on Ethereum. Another great advantage of using Stellar is, tokens are available on Stellar Distributed Exchange in a day, where anyone can trade without waiting for it to get listed on other exchanges.</p><p>This article is about creating custom tokens on Stellar network and accepting BTC/ETH contributions in an ICO. You can read more on why Stellar can be a better ICO platform by <a href="https://twitter.com/anthenor" target="_blank" rel="external">Micha Benoliel</a> on <a href="https://hackernoon.com/why-stellar-could-be-the-next-big-ico-platform-f48fc3cb9a6c" target="_blank" rel="external">hackernoon</a>.</p><!-- TOC --><h2 id="Create-Token"><a href="#Create-Token" class="headerlink" title="Create Token"></a>Create Token</h2><p>Creating tokens on Stellar platform is very easy, we will be using stellar laboratory and test network for demo in this article. You can also run private network if you want, whole project is available on github to play with.</p><p>We need two accounts on Stellar to proceed, one is “Issuing account” and another is “Distributing account”. Well, to create tokens one account is enough but its always good to keep issuing account separate and use assets from distributing account.</p><h3 id="Create-issuing-account"><a href="#Create-issuing-account" class="headerlink" title="Create issuing account"></a>Create issuing account</h3><p>Go to <a href="https://www.stellar.org/laboratory/" target="_blank" rel="external">Stellar Laboratory</a> and click on Account Creator tab.</p><ol><li>Generate keypair<br> Save the public address and secret.</li><li>Fund the test Account<br> Generated account is not activated until it has some lumens, so fund the account with Friendbot available on the same tab.</li></ol><p>Keep in mind that issuing account can generate as many tokens as it wants and hence tokens sent back to issuing account vanishes.</p><h3 id="Create-distributing-account"><a href="#Create-distributing-account" class="headerlink" title="Create distributing account"></a>Create distributing account</h3><p>Follow the same process mentioned above for generating account. There is no special difference between an issuing account and distributing account, its just a general concept to keep things separate. Save details of this account as well, we will be using this account to sell tokens.</p><h3 id="Add-trustline"><a href="#Add-trustline" class="headerlink" title="Add trustline"></a>Add trustline</h3><p>In Stellar network no one can send any other token (asset) to anyone unless receiver trusts the asset. Here we want to send tokens from issuing account to the distributing account hence the distributing account needs to trust the asset in order to receive it. You can read more on trustline <a href="https://www.stellar.org/developers/guides/concepts/list-of-operations.html#change-trust" target="_blank" rel="external">here</a>. Adding trust is easy as creating a transaction on stellar network.</p><p>When someone buys token from the exchange they are already trusting the asset, but someone who has not purchased the asset before has to add the trustline in order to receive your tokens.</p><p>Visit the Transaction builder tab in the laboratory and fill the form as show.Make sure to enter addresses with the ones that you have generated.</p><div class="figure center nocaption" style="width:;"><img class="fig-img" src="https://res.cloudinary.com/ashisherc/image/upload/v1517768980/pbkvk62izkdkagv2wk62.png" alt="Adding change trust operation"></div><div class="figure center nocaption" style="width:;"><img class="fig-img" src="https://res.cloudinary.com/ashisherc/image/upload/v1517768980/pbkvk62izkdkagv2wk62.png" alt="Adding change trust operation"></div><p>After filling in details, click on Sign in Transaction signer, enter distributing account secret when requested and submit the transaction. If the transaction is successful you have successfully added trust for the new asset, which issuing account is about to send.</p><h3 id="Issue-Tokens"><a href="#Issue-Tokens" class="headerlink" title="Issue Tokens"></a>Issue Tokens</h3><p>Issuing token is making a payment to the distributing account from issuing account of total tokens you want to generate. After making the payment we will freeze the issuing account so that no more tokens can be generated at later point and total supply is fixed.</p><p>Go to the Transaction builder tab in the laboratory and fill in the form as show in below image. Enter source address as issuing account address, fetch the next transaction number and than set option as shown in below image.</p><div class="figure center nocaption" style="width:;"><img class="fig-img" src="https://res.cloudinary.com/ashisherc/image/upload/v1517770503/istvxao9b62acdovik1n.png" alt="Issuing tokens"></div><p>After filling in details, click on Sign in Transaction signer, enter issuing account secret when requested and submit the transaction. If the transaction is successful you have successfully created a token on Stellar platform and sent it to distributing account from where it can be sold.</p><h2 id="Freeze-total-supply"><a href="#Freeze-total-supply" class="headerlink" title="Freeze total supply"></a>Freeze total supply</h2><p>You don’t want to issue infinite amount of tokens else the token will have no value and to make sure that no more tokens can be generated, the issuing account is freezed. Freezing the account is also making a transaction on the stellar network, everything on stellar network is transactions. After freezing, the account will not be able to make any transactions on the network.</p><p>Go to the Transaction builder tab in the laboratory and fill in the form as show in below image. Enter source address as issuing account address, fetch the next transaction number and than set option as shown in below image.</p><div class="figure center nocaption" style="width:;"><img class="fig-img" src="https://res.cloudinary.com/ashisherc/image/upload/v1517770538/whc0hfajvfevffpl6n8e.png" alt="Locking the account"></div><p>After filling in details, click on Sign in Transaction signer, enter issuing account secret when requested and submit the transaction.</p><h2 id="Selling-token"><a href="#Selling-token" class="headerlink" title="Selling token"></a>Selling token</h2><p>Selling token is also making a transaction on stellar network, thanks to its built in decentralized exchange. You put a sell order with desired price and anyone can buy the tokens by making a transaction. Its as simple as that. Of course this only works with assets on Stellar platform, but Stellar also has a service which can be used to accept BTC and ETH for the ICO. Let’s see it in action.</p><h3 id="Accepting-XLM-Lumens"><a href="#Accepting-XLM-Lumens" class="headerlink" title="Accepting XLM (Lumens)"></a>Accepting XLM (Lumens)</h3><p>Let’s make a transaction from the distributing account to sell newly created token for 1 XLM each. </p><p>Go to the Transaction builder tab in the laboratory and fill in the form as show in below image. Enter source address as issuing account address, fetch the next transaction number and than set option as shown in below image.</p><div class="figure center nocaption" style="width:;"><img class="fig-img" src="https://res.cloudinary.com/ashisherc/image/upload/v1517770597/fi10rnfwihulvxaccx1y.png" alt="Locking the account"></div><p>The same way anyone can put a buy order with the matching criteria and tokens will be exchanged. The distributing account will receive 1 XLM for every 1 APC token sold. </p><p>After filling in details, click on Sign in Transaction signer, enter distributing account secret when requested and submit the transaction.</p><h3 id="Accepting-BTC-ETH"><a href="#Accepting-BTC-ETH" class="headerlink" title="Accepting BTC/ETH"></a>Accepting BTC/ETH</h3><p>This will take a little bit of development work but is also very simple. After all everything is out of the box ready for making an ICO a small work here should be all fine. You need to manually setup a bifrost service on your side to receive BTC/ETH. Here’s the link to the github repo of <a href="https://github.com/stellar/go/tree/master/services/bifrost" target="_blank" rel="external">bifrost</a>.</p><p>All the steps you see above can be done programatically using stellar sdk available for all major platforms. Here’s link to the <a href="https://github.com/stellar/js-stellar-sdk" target="_blank" rel="external">javascript SDK</a>.</p><p>Thanks for reading!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;As you know, majority of the ICOs today are made on Ethereum (ERC20 token). But Ethereum is a big slow computer. If the intension is just to raise funds for the startup then Stellar can do a lot faster, better and cheaper! Note that stellar does not provide smart contracts, it is an open source p
    
    </summary>
    
      <category term="blockchain" scheme="https://eilarc.io/blog/categories/blockchain/"/>
    
    
      <category term="XLM" scheme="https://eilarc.io/blog/tags/xlm/"/>
    
      <category term="ICO" scheme="https://eilarc.io/blog/tags/ico/"/>
    
      <category term="cryptocurrency" scheme="https://eilarc.io/blog/tags/cryptocurrency/"/>
    
  </entry>
  
  <entry>
    <title>Node.js Logging Done the Right Way</title>
    <link href="https://eilarc.io/blog/2017/11/06/node-js-logging-done-the-right-way/"/>
    <id>https://eilarc.io/blog/2017/11/06/node-js-logging-done-the-right-way/</id>
    <published>2017-11-05T19:30:00.000Z</published>
    <updated>2018-07-28T18:30:16.492Z</updated>
    
    <content type="html"><![CDATA[<p>I’m going to talk about logging in nodejs in this article. Logging is the most important part of your application but to make it work proper in scalable applications like microservice architectures becomes difficult, as you would want to know the logs you see are coming from where!</p><p>I will show you how I make logging in nodejs streamlined and avoid logging at multiple places unnecessarily.</p><!-- TOC --><h2 id="Implementing-Logging-in-Nodejs"><a href="#Implementing-Logging-in-Nodejs" class="headerlink" title="Implementing Logging in Nodejs"></a>Implementing Logging in Nodejs</h2><p>A proper logging structure will make it easy for you and coming developers to put logs in your application. I’m using express framework in this article, but you can implement the same in any framework of your choice.</p><p>We need a logging library to print logs, <a href="https://github.com/trentm/node-bunyan" target="_blank" rel="external">Bunyan</a> is a good option out there. Remember you can always replace your logger library easily inside our logger service and that’s the benefit of implementing this logger service.</p><p>You can follow along the article and go through the code on <a href="https://github.com/ashisherc/demo-nodejs-logging" target="_blank" rel="external">github</a></p><h3 id="Let’s-make-a-logger-service"><a href="#Let’s-make-a-logger-service" class="headerlink" title="Let’s make a logger service"></a>Let’s make a logger service</h3><p>We will make a modular logger that can be imported anywhere in your project without worrying about changing the logger at anytime and not affecting your whole project. If you ever need to change level or you want to use a new logging library, you can do so in this file.</p><figure class="highlight js"><figcaption><span>services/logger.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> bunyan = <span class="built_in">require</span>(<span class="string">"bunyan"</span>); <span class="comment">// Logger library</span></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * You can make a wrapper here for the logging levels</span></div><div class="line"><span class="comment"> * and export your wrapper as the logger, which will</span></div><div class="line"><span class="comment"> * support a few logger libraries</span></div><div class="line"><span class="comment"> */</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> logger = bunyan.createLogger(&#123;</div><div class="line">    name: <span class="string">"node-logger-demo"</span>,  <span class="comment">// Name can be service name and extra details you may wan to put.</span></div><div class="line">    level: <span class="string">"info"</span> <span class="comment">// Logger level should be read from environment variables.</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// We will add remote stream here next </span></div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = logger;</div></pre></td></tr></table></figure><h3 id="Implement-error-handler-in-express"><a href="#Implement-error-handler-in-express" class="headerlink" title="Implement error handler in express"></a>Implement error handler in express</h3><p>If you have scaffolded your app using express generator, you will have an error handler created for you, else you want to create one shown below inside your app.js file. This middleware accepts first parameter as error and is called whenever you make a next(error) call.</p><p>If you are a newbie in express, there is an example of next() coming in this article, keep going.</p><figure class="highlight js"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> logger = <span class="built_in">require</span>(<span class="string">'./services/logger'</span>); <span class="comment">// require the logger that we just created.</span></div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line"><span class="comment">// Put this middleware at last after defining your routes. </span></div><div class="line"><span class="comment">// error handler</span></div><div class="line">app.use(<span class="function"><span class="keyword">function</span> (<span class="params">err, req, res, next</span>) </span>&#123;</div><div class="line">  <span class="comment">/**</span></div><div class="line"><span class="comment">   * Log the error using our logger service</span></div><div class="line"><span class="comment">   * We will control logging in dev and prod environment in</span></div><div class="line"><span class="comment">   * our logger service itself.</span></div><div class="line"><span class="comment">   */</span></div><div class="line">  logger.error(err);</div><div class="line"></div><div class="line">  res.status(err.status || <span class="number">500</span>);</div><div class="line">  res.send(&#123; <span class="string">"error"</span>: err.message &#125;);</div><div class="line">  <span class="comment">// send only the error message that you would like to send to user</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line">...</div></pre></td></tr></table></figure><p>You can import the logger service in all your project modules and log easily the same way it’s used inside app.js error handler. But now you will do that rarely because of this error handler which logs every error you pass inside next as next(error) from your routes. Lets put this together and see how it works.</p><h3 id="Using-next-error-inside-your-routes"><a href="#Using-next-error-inside-your-routes" class="headerlink" title="Using next(error) inside your routes"></a>Using next(error) inside your routes</h3><p>This is one route registered with app.js, and is attached at api endpoint /api/user. If you make a mongoose query or call a function which returns a promise or accepts a callback function, you can always do next(error) inside catch of promise or callback function if error is not null. This avoid you writing an additional logging statement and also makes it easy to send a response to user with proper error message, all because of error handler that we wrote just above.</p><figure class="highlight js"><figcaption><span>routes/user.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">var</span> router = express.Router();</div><div class="line"></div><div class="line"><span class="comment">/* GET users listing. */</span></div><div class="line">router.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</div><div class="line">  <span class="keyword">try</span> &#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * make a db query to get users</span></div><div class="line"><span class="comment">     * I'm hard coding a dummy json for the purpose</span></div><div class="line"><span class="comment">     */</span></div><div class="line"></div><div class="line">    <span class="keyword">var</span> result = &#123;</div><div class="line">        users: [&#123; <span class="attr">name</span>: <span class="string">"user1"</span> &#125;, &#123; <span class="attr">name</span>: <span class="string">"user2"</span> &#125;]</div><div class="line">    &#125;;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">catch</span> (error) &#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * If something goes wrong, error is sent to next</span></div><div class="line"><span class="comment">     * and than its logged by error handler</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    next(error);</div><div class="line">    <span class="keyword">return</span>; <span class="comment">// return to stop further execution</span></div><div class="line">  &#125;</div><div class="line">  res.send(result);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = router;</div></pre></td></tr></table></figure><p>Above code snippet passes the error to error handler, hence it does not require to import the logger service and the error automatically gets logged inside the error handler we wrote above. You can still import logger service to log info and other level, take a look at the below code snippet.</p><h3 id="Using-logger-service-to-log-info-debug-etc-logs"><a href="#Using-logger-service-to-log-info-debug-etc-logs" class="headerlink" title="Using logger service to log info, debug etc logs"></a>Using logger service to log info, debug etc logs</h3><figure class="highlight js"><figcaption><span>routes/user.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> logger = <span class="built_in">require</span>(<span class="string">'../services/logger'</span>);</div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line">router.get(<span class="string">'/:id'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> user = &#123;</div><div class="line">    name: <span class="string">"user1"</span></div><div class="line">  &#125;;</div><div class="line">  <span class="comment">// use logger service to log info.</span></div><div class="line">  logger.info(<span class="string">`requested user id: <span class="subst">$&#123;req.params.id&#125;</span>`</span>);</div><div class="line">  res.send(user)</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = router;</div></pre></td></tr></table></figure><p>Here we imported the logger service and used it to log an info about the requested users id.</p><p>You can use the logger this way anywhere in your project and log anything. The best part is again replace the logger library inside logger service, change the log level and any settings and you are good to go with new library without any extra changes. We are done with logging setup here but now lets see how we can see those logs on a remote website by just enhancing our logger service, after all who wants to see logs in a log file anymore!</p><h2 id="Implement-remote-log-stream"><a href="#Implement-remote-log-stream" class="headerlink" title="Implement remote log stream"></a>Implement remote log stream</h2><p>If you haven’t been using any remote logging service before, you should now. This allows viewing your logs at nice place by just login into your account and lets you analyze the logs, you can do filtering and all kind of stuff easily. We will integrate <a href="https://logentries.com/" target="_blank" rel="external">logentries</a> in our logger service to see and analyze logs at logentries. There are other choices for logging service you can choose according to your needs. I have used logentries in a few of my projects and it does really a good job.</p><h3 id="Integrate-logentries"><a href="#Integrate-logentries" class="headerlink" title="Integrate logentries"></a>Integrate logentries</h3><p>We need a bunyan transport to send logs to logentries, The below one is very light implementation over tcp, Install <a href="https://github.com/ashisherc/bunyan-transport" target="_blank" rel="external">bunyan-transport</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --save bunyan-transport</div></pre></td></tr></table></figure><p>Now lets require this module to make our logger service send logs to logentries. Make changes to the logger.js file as shown below, we only changed our logger service and everything just works as it is, but now you will see logs at logentries.com instead of the console.<br>Bunyan prints a lot more information than you might need sometimes, you can configure which key values to be sent to logentries inside bunyan transport. You can read more about it here at <a href="https://github.com/ashisherc/bunyan-transport" target="_blank" rel="external">bunyan-transport</a></p><figure class="highlight js"><figcaption><span>services/logger.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> bunyanTransport = <span class="built_in">require</span>(<span class="string">'bunyan-transport'</span>);</div><div class="line"></div><div class="line">logger = bunyan.createLogger(&#123;</div><div class="line">    name: <span class="string">'node-logger-demo'</span>,</div><div class="line">    streams: [&#123;</div><div class="line">        level: <span class="string">"info"</span>,</div><div class="line">        stream: <span class="keyword">new</span> bunyanTransport.logentriesStream(&#123;</div><div class="line">            token: <span class="string">"token"</span> <span class="comment">// logentries token</span></div><div class="line">        &#125;),</div><div class="line">        type: <span class="string">'raw'</span></div><div class="line">    &#125;]</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = logger;</div></pre></td></tr></table></figure><p>Till here its all fine, but you may be thinking to use this only in prod environment and not in development mode. You can sure do that, and I guess you already have your own way working with different environments, but still here’s a snippet to put all together.</p><h3 id="Production-and-dev-environment-setup-in-logger-service"><a href="#Production-and-dev-environment-setup-in-logger-service" class="headerlink" title="Production and dev environment setup in logger service"></a>Production and dev environment setup in logger service</h3><p>I always keep a separate group of modules to read and validate environment variables and export as config to consume in my project. I will directly use the environment variables here to show you the working of logger. Based on type of environment we create a logger and export that from logger service, which includes log level as well.</p><figure class="highlight js"><figcaption><span>services/logger.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> bunyan = <span class="built_in">require</span>(<span class="string">"bunyan"</span>);</div><div class="line"><span class="keyword">const</span> bunyanTransport = <span class="built_in">require</span>(<span class="string">'bunyan-transport'</span>);</div><div class="line"></div><div class="line"><span class="keyword">let</span> logger = <span class="literal">null</span>;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (process.env.NODE_ENV == <span class="string">"production"</span>) &#123;</div><div class="line">    logger = bunyan.createLogger(&#123;</div><div class="line">        name: <span class="string">'node-logger-demo'</span>,</div><div class="line">        streams: [&#123;</div><div class="line">            level: process.env.LOG_LEVEL,</div><div class="line">            stream: <span class="keyword">new</span> bunyanTransport.logentriesStream(&#123;</div><div class="line">                token: process.env.LOG_TOKEN</div><div class="line">            &#125;),</div><div class="line">            type: <span class="string">'raw'</span></div><div class="line">        &#125;]</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">else</span> &#123;</div><div class="line">    logger = bunyan.createLogger(&#123;</div><div class="line">        name: <span class="string">'node-logger-demo'</span>,</div><div class="line">        level: process.env.LOG_LEVEL</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = logger;</div></pre></td></tr></table></figure><p>So, that’s how I make a streamlined logger in my nodejs projects, please share what tools you use in your projects and any suggestion on how this can be improved, and thanks for reading this article.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I’m going to talk about logging in nodejs in this article. Logging is the most important part of your application but to make it work proper in scalable applications like microservice architectures becomes difficult, as you would want to know the logs you see are coming from where!&lt;/p&gt;
&lt;p&gt;I will 
    
    </summary>
    
      <category term="nodejs" scheme="https://eilarc.io/blog/categories/nodejs/"/>
    
    
      <category term="logging" scheme="https://eilarc.io/blog/tags/logging/"/>
    
      <category term="bunyan" scheme="https://eilarc.io/blog/tags/bunyan/"/>
    
  </entry>
  
</feed>
